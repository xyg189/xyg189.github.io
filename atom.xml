<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xyg189.github.io</id>
    <title>XYG&apos;s Blog</title>
    <updated>2021-08-29T03:30:09.988Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xyg189.github.io"/>
    <link rel="self" href="https://xyg189.github.io/atom.xml"/>
    <subtitle>不忘初心</subtitle>
    <logo>https://xyg189.github.io/images/avatar.png</logo>
    <icon>https://xyg189.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, XYG&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（七）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-7/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-7/">
        </link>
        <updated>2021-08-29T01:37:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="支持多语言">支持多语言</h2>
<p>多语言环境就是在你的应用中将一些字符串根据不同的语言进行替换。语言字符串存储于 <strong>app/Language</strong> 目录下，其下的每个子目录都代表着一种所支持的语言。<br>
文件名没有特别要求，语言文件的内容就是如下形式：</p>
<pre><code class="language-php">'language_key' =&gt; 'The actual message to be shown.'
</code></pre>
<p>在程序中直接使用 <code>lang('文件名.language_key')</code> 就能得到当前语言下对应的语言字符串内容了。如果没有找到 '文件名.language_key'，则直接显示 '文件名.language_key'。</p>
<h3 id="配置语言识别">配置语言识别</h3>
<p>默认的语言/地区属性，可以通过 <strong>app/Config/App.php</strong> 进行设置：</p>
<pre><code class="language-php">public $defaultLocale = 'en';
</code></pre>
<p>然后设置两个额外的参数来自动开启内容协商。</p>
<pre><code class="language-php">public $negotiateLocale = true;
...
public $supportedLocales = ['en', 'zh-CN'];
</code></pre>
<p>这个机制基于浏览器将通常会在 <strong>Accept-Language</strong> 请求头中发送偏好的语言类型，来匹配我们支持的语言。如果匹配不到的话，<strong>$supportedLocales</strong> 数组的第一个成员就会被使用。</p>
<h3 id="安装翻译包">安装翻译包</h3>
<p>CodeIgniter 4 已经提供了自身的翻译文件，直接在我们项目中使用命令安装翻译包：</p>
<pre><code class="language-bash">./composer.phar require codeigniter4/translations
</code></pre>
<p>就会安装到 <strong>app/vendor/codeigniter4/translations</strong> 目录下，程序中关于 CodeIgniter 4 自身要显示文字的翻译过的信息就会自动被使用。</p>
<h3 id="创建自己的语言文件">创建自己的语言文件</h3>
<p>GeminusAdmin 要用到的翻译信息就使用自己创建的语言文件，保存在如下目录结构：</p>
<pre><code>/app
    /Language
        /en
            Geminus.php
        /zh-CN
            Geminus.php
</code></pre>
<p>简体中文的语言文件内容如下：</p>
<pre><code class="language-php">&lt;?php

return [
    'Login' =&gt; '登录',
    'Email' =&gt; '电邮地址',
    'Password' =&gt; '密码',
    'Submit' =&gt; '提交',
    'supportBrowser' =&gt; '不支持“Internet Explorer”，请使用现代浏览器。',
    'errorAuthInput' =&gt; '电邮地址或密码错误。',
    'errorAuthBlocked' =&gt; '账号被封，请联系系统管理员。',
    ...
];
</code></pre>
<h3 id="修改之前的程序以使用多语言">修改之前的程序以使用多语言</h3>
<p>编辑 <strong>app/Views/login_view.php</strong> 文件，所有显示字符串都改为 <strong>lang()</strong> 方式：</p>
<pre><code class="language-html">&lt;header class=&quot;container&quot;&gt;
    &lt;ul id=&quot;lang&quot; class=&quot;right&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;?lang=en&quot; class=&quot;btn-flat&quot;&gt;EN&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;?lang=zh-CN&quot; class=&quot;btn-flat&quot;&gt;简&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/header&gt;
&lt;main class=&quot;container row&quot;&gt;
    &lt;div class=&quot;col l8 offset-l2 s12&quot;&gt;
        &lt;h5&gt;Geminus Admin&lt;/h5&gt;
        &lt;form method=&quot;POST&quot; action=&quot;/login/check&quot; class=&quot;row card-panel&quot; data-callback=&quot;location.href = '/admin/home'&quot;&gt;
            &lt;div class=&quot;input-field col s12 center&quot;&gt;
                &lt;h5&gt;&lt;?=lang('Geminus.Login')?&gt;&lt;/h5&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12&quot;&gt;
                &lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;text&quot; class=&quot;validate&quot; required&gt;
                &lt;label for=&quot;email&quot;&gt;&lt;?=lang('Geminus.Email')?&gt;&lt;/label&gt;
                &lt;span id=&quot;email_helper&quot; class=&quot;helper-text&quot; data-error=&quot;&quot;&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12&quot;&gt;
                &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; class=&quot;validate&quot; required&gt;
                &lt;label for=&quot;password&quot;&gt;&lt;?=lang('Geminus.Password')?&gt;&lt;/label&gt;
                &lt;span id=&quot;password_helper&quot; class=&quot;helper-text&quot; data-error=&quot;&quot;&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12 center&quot;&gt;
                &lt;input type=&quot;submit&quot; class=&quot;btn&quot; value=&quot;&lt;?=lang('Geminus.Submit')?&gt;&quot;&gt;
            &lt;/div&gt;
        &lt;/form&gt;
        &lt;p&gt;&lt;?=lang('Geminus.supportBrowser')?&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/main&gt;
</code></pre>
<p>编辑 <strong>app/Controllers/Login.php</strong> 文件，处理用户选择的语言和表单错误信息：</p>
<pre><code class="language-php">&lt;?php

namespace App\Controllers;

use App\Models\UserModel;

class Login extends BaseController
{
	protected $helpers = ['form', 'text'];

	public function index()
	{
		//保存用户选择语言
		if ($this-&gt;request-&gt;getGet('lang')) {
			$lang = $this-&gt;request-&gt;getGet('lang');
			$this-&gt;request-&gt;setLocale($lang);
			$this-&gt;session-&gt;set('lang', $lang);
		}

		$data['meta'] = csrf_meta();
		$data['css'][] = base_url('css/login.css?v=').random_string('basic');;
		$data['js'][] = base_url('js/admin.js?v=').random_string('basic');

		//csrf只开启post方法，所以要自己发送cookie
		$security = \Config\Services::security();
		$security-&gt;verify($this-&gt;request);
		echo view('header', $data);
		echo view('login_view', $data);
		echo view('footer', $data);
	}

	public function check()
	{
		if (! $this-&gt;request-&gt;isAJAX()) {
			exit;
		}

		$output = ['result'=&gt;FALSE, 'token_name'=&gt;csrf_header(), 'token_value'=&gt;csrf_hash()];

		if (! $this-&gt;validate([
			'email' =&gt; [
				'label' =&gt; 'Geminus.Email',
				'rules' =&gt; 'trim|required|valid_email'
			],
			'password' =&gt; [
				'label' =&gt; 'Geminus.Password',
				'rules' =&gt; 'trim|required|min_length[8]'
			]
		])) {
			$output['message'] = $this-&gt;validator-&gt;getErrors();
        } else {
			$auth = service('auth');
			$result = $auth-&gt;checkUser([&quot;_email[{$this-&gt;request-&gt;getPost('email')}]&quot;, '_block', &quot;_password[{$this-&gt;request-&gt;getPost('password')}]&quot;]);
			if (! is_array($result)) {
				$output['message'] = $result;
			} else {
				$user = $result;
				
				$newdata = [
					'user_id'    =&gt; $user['user_id'],
                    'user_name'  =&gt; $user['user_name'],
                    'user_email' =&gt; $user['user_email'],
					'role'       =&gt; $user['role'],
					'avatar'     =&gt; $user['avatar'],
                    'logged_in'  =&gt; TRUE
                ];
                $this-&gt;session-&gt;set($newdata);
				$output['result'] = TRUE;
			}
        }

		$this-&gt;response-&gt;setContentType('application/json');
		$this-&gt;response-&gt;setBody(json_encode($output))-&gt;send();
	}
}
</code></pre>
<p>编辑 <strong>app/Controllers/BaseController.php</strong> 文件，在 <strong>initController()</strong> 中增加对用户选择语言的处理：</p>
<pre><code class="language-php">    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
	{
		// Do Not Edit This Line
		parent::initController($request, $response, $logger);

		//--------------------------------------------------------------------
		// Preload any models, libraries, etc, here.
		//--------------------------------------------------------------------
		// E.g.: $this-&gt;session = \Config\Services::session();
		$this-&gt;session = \Config\Services::session();
		if ($this-&gt;session-&gt;has('lang')) {
			$request-&gt;setLocale($this-&gt;session-&gt;get('lang'));
		}
	}
</code></pre>
<p>编辑 <strong>app/Libraries/Auth.php</strong> 文件，在 <strong>checkUser()</strong> 中处理错误信息：</p>
<pre><code class="language-php">    public function checkUser($rules = [])
	{
		$errors = [
			'_email' =&gt; 'Geminus.errorAuthInput',
			'_block' =&gt; 'Geminus.errorAuthBlocked',
			'_password' =&gt; 'Geminus.errorAuthInput'
		];
        ...
</code></pre>
<p>我们再用默认简体中文语言的浏览器打开 <strong>localhost:8080</strong>，就可以看到 GeminusAdmin 的登录界面已经显示简体中文了。CodeIgniter 自带的表单出错信息也可以正常显示简体中文。<br>
<img src="https://xyg189.github.io/post-images/1630207152649.png" alt="" loading="lazy"><br>
用户还可以自行选择希望显示的语言，并且程序会记住用户的选择，当刷新浏览器后会显示用户之前选择的语言。</p>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（六）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-6/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-6/">
        </link>
        <updated>2021-08-14T07:22:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="geminusadmin-后台管理框架">GeminusAdmin 后台管理框架</h2>
<h3 id="登录状态过滤器">登录状态过滤器</h3>
<p>只有登录成功的用户才能访问后台管理的各个页面，所有后台管理页面都需要进行登录状态验证。这个工作就适合放在过滤器中实现。首先编辑配置文件 <strong>app/Config/Filters.php</strong> 添加过滤器名称：</p>
<pre><code class="language-php">public $aliases = [
    ...
    'isLoggedIn' =&gt; \App\Filters\LoggedIn::class,
    ...
];
</code></pre>
<p>并且指定后台所有控制器需要应用这个过滤器：</p>
<pre><code class="language-php">public $filters = [
	'isLoggedIn' =&gt; ['before' =&gt; ['admin/*']]
];
</code></pre>
<p>接下来创建实际的过滤器代码 <strong>app/Filters/LoggedIn.php</strong>：</p>
<pre><code class="language-php">&lt;?php

namespace App\Filters;

use CodeIgniter\Filters\FilterInterface;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Config\Services;

class LoggedIn implements FilterInterface
{
    /**
     * 检查用户是否已登录
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function before(RequestInterface $request, $arguments = null)
    {
        $auth = service('auth');

        if (! $auth-&gt;isLoggedIn()) {
            return redirect()-&gt;to(base_url('login'));
        }
    }

    //--------------------------------------------------------------------

    /**
     * We don't have anything to do here.
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param ResponseInterface|\CodeIgniter\HTTP\Response       $response
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
    {
        // ...
    }
}
</code></pre>
<p>因为我们使用 Auth 库来处理所有的认证相关功能，所以在 <strong>app/Libraries/Auth.php</strong> 中添加对应方法：</p>
<pre><code class="language-php">    public function isLoggedIn()
    {
        $session = \Config\Services::session();
        if (isset($_SESSION['logged_in'])) {
            return $_SESSION['logged_in'];
        }

        return FALSE;
    }
</code></pre>
<p>验证不成功就跳转到登录页面。</p>
<h3 id="基本页面布局">基本页面布局</h3>
<p>一般的后台管理系统页面布局都会包含常见的界面组件：导航条和侧边栏。所以我们新建一个 <strong>app/Views/admin/menu.php</strong> 来保存这2个通用组件的代码，每个页面都包含 <strong>app/Views/header.php</strong> 、<strong>app/Views/footer.php</strong> 和这个文件。<br>
导航条内容包含当前页面的标题、当前登录用户的头像与昵称、退出等内容：</p>
<pre><code class="language-html">    &lt;div class=&quot;navbar-fixed&quot;&gt;
        &lt;nav class=&quot;white&quot;&gt;
            &lt;div class=&quot;nav-wrapper&quot;&gt;
                &lt;a href=&quot;&lt;?=current_url()?&gt;&quot; class=&quot;brand-logo grey-text text-darken-4&quot;&gt;&lt;?=$page_title?&gt;&lt;/a&gt;
                &lt;ul id=&quot;nav-mobile&quot; class=&quot;right hide-on-med-and-down&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/profile')?&gt;&quot;&gt;
&lt;?php if (empty($_SESSION['avatar'])) : ?&gt;
                        &lt;span class=&quot;avatar&quot; data-name=&quot;&lt;?=mb_substr($_SESSION['user_name'], 0, 1)?&gt;&quot;&gt;&lt;/span&gt;
&lt;?php else : ?&gt;
                        &lt;img src=&quot;&lt;?=base_url('images/avatar/'.$_SESSION['avatar'])?&gt;&quot; class=&quot;avatar circle&quot;&gt;
&lt;?php endif ?&gt;
                        &amp;nbsp;&amp;nbsp;&lt;?=esc($_SESSION['user_name'])?&gt;&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('logout')?&gt;&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;exit_to_app&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;a href=&quot;#&quot; data-target=&quot;slide-out&quot; class=&quot;sidenav-trigger&quot;&gt;&lt;i class=&quot;material-icons black-text&quot;&gt;menu&lt;/i&gt;&lt;/a&gt;
            &lt;/div&gt;
        &lt;/nav&gt;
    &lt;/div&gt;
</code></pre>
<p>侧边栏内容包含了所有系统功能的链接：</p>
<pre><code class="language-html">    &lt;ul id=&quot;slide-out&quot; class=&quot;sidenav sidenav-fixed blue accent-2&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/home')?&gt;&quot; class=&quot;logo-container&quot;&gt;Geminus Admin&lt;i class=&quot;material-icons left&quot;&gt;featured_video&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/event')?&gt;&quot;&gt;Event&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;no-padding&quot;&gt;
            &lt;ul class=&quot;collapsible&quot;&gt;
&lt;?php if ($_SESSION['role'] == 'superadmin') : ?&gt;
                &lt;li class=&quot;waves-effect&quot;&gt;
                    &lt;a class=&quot;collapsible-header&quot;&gt;System&lt;i class=&quot;material-icons chevron right&quot;&gt;chevron_left&lt;/i&gt;&lt;/a&gt;
                    &lt;div class=&quot;collapsible-body&quot;&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/account')?&gt;&quot; class=&quot;waves-effect&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;supervisor_account&lt;/i&gt;Account&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/syslog/mail')?&gt;&quot; class=&quot;waves-effect&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;view_list&lt;/i&gt;Mail Queue&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/syslog/user')?&gt;&quot; class=&quot;waves-effect&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;view_list&lt;/i&gt;User Log&lt;/a&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/li&gt;
&lt;?php endif ?&gt;
                &lt;li class=&quot;waves-effect&quot;&gt;
                    &lt;a class=&quot;collapsible-header&quot;&gt;Personal&lt;i class=&quot;material-icons chevron right&quot;&gt;chevron_left&lt;/i&gt;&lt;/a&gt;
                    &lt;div class=&quot;collapsible-body&quot;&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('admin/profile')?&gt;&quot; class=&quot;waves-effect&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;account_circle&lt;/i&gt;Settings&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;&lt;?=base_url('logout')?&gt;&quot; class=&quot;waves-effect&quot;&gt;&lt;i class=&quot;material-icons&quot;&gt;exit_to_app&lt;/i&gt;Logout&lt;/a&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
</code></pre>
<h3 id="基础控制器">基础控制器</h3>
<p>基础控制器是包含一些共用的功能，方便统一使用。所有后台管理的控制器都是继承的这个基础控制器。CodeIgniter 4 已包含了一个基础控制器的例子，所以我们直接复制 <strong>app/Controllers/BaseController.php</strong> 到 <strong>app/Controllers/admin/AdminController.php</strong>，并添加了需要使用的辅助函数和数据库连接。</p>
<pre><code class="language-php">&lt;?php

namespace App\Controllers\Admin;

use CodeIgniter\Controller;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

/**
 * Class BaseController
 *
 * BaseController provides a convenient place for loading components
 * and performing functions that are needed by all your controllers.
 * Extend this class in any new controllers:
 *     class Home extends BaseController
 *
 * For security be sure to declare any new methods as protected or private.
 */

class AdminController extends Controller
{
	/**
	 * An array of helpers to be loaded automatically upon
	 * class instantiation. These helpers will be available
	 * to all other controllers that extend BaseController.
	 *
	 * @var array
	 */
	protected $helpers = ['form', 'text'];
	protected $db;
	
	/**
	 * Constructor.
	 *
	 * @param RequestInterface  $request
	 * @param ResponseInterface $response
	 * @param LoggerInterface   $logger
	 */
	public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
	{
		// Do Not Edit This Line
		parent::initController($request, $response, $logger);

		//--------------------------------------------------------------------
		// Preload any models, libraries, etc, here.
		//--------------------------------------------------------------------
		$this-&gt;db = \Config\Database::connect();
	}
}
</code></pre>
<h3 id="home-页面">Home 页面</h3>
<p>登录成功后就进入 Home 页面，首先创建控制器文件 <strong>app/Controllers/admin/Home.php</strong>：</p>
<pre><code class="language-php">&lt;?php

namespace App\Controllers\Admin;

class Home extends AdminController
{
	public function index()
	{
		$data['css'][] = base_url('css/admin.css?v=').random_string('basic');
		$data['js'][] = base_url('js/admin.js?v=').random_string('basic');
		$data['page_title'] = 'Home';

		echo view('header', $data);
		echo view('admin/menu', $data);
		echo view('footer', $data);
	}
}
</code></pre>
<p>Home 页面非常简单，目前还没有其它功能，界面效果如图：<br>
<img src="https://xyg189.github.io/post-images/1628930119309.png" alt="" loading="lazy"></p>
<h3 id="登出功能">登出功能</h3>
<p>登出和登录功能相对应，登出不需要界面，只有控制器文件 <strong>app/Controllers/Logout.php</strong>：</p>
<pre><code class="language-php">&lt;?php

namespace App\Controllers;

class Logout extends BaseController
{
    public function index()
	{
        $this-&gt;session = \Config\Services::session();
        if (isset($_SESSION['logged_in'])) {
            $_SESSION['logged_in'] = FALSE;
        }
        return redirect()-&gt;to(base_url('login'));
    }
}
</code></pre>
<p>就是把之前登录成功的 <strong>logged_in</strong> 状态设为 FALSE，并跳转到登录页面。</p>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（五）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-5/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-5/">
        </link>
        <updated>2021-08-09T01:52:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建登录功能">创建登录功能</h2>
<h3 id="登录界面">登录界面</h3>
<p>我们使用 Email 和密码来做登录验证。<br>
新建登录视图文件 <strong>app/Views/login_view.php</strong></p>
<pre><code class="language-html">&lt;main class=&quot;container row&quot;&gt;
    &lt;div class=&quot;col l8 offset-l2 s12&quot;&gt;
        &lt;h5&gt;Geminus Admin&lt;/h5&gt;
        &lt;form method=&quot;POST&quot; action=&quot;/login/check&quot; class=&quot;row card-panel&quot; data-callback=&quot;location.href = '/admin/home'&quot;&gt;
            &lt;div class=&quot;input-field col s12 center&quot;&gt;
                &lt;h5&gt;Login&lt;/h5&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12&quot;&gt;
                &lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;text&quot; class=&quot;validate&quot; required&gt;
                &lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;
                &lt;span id=&quot;email_helper&quot; class=&quot;helper-text&quot; data-error=&quot;&quot;&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12&quot;&gt;
                &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; class=&quot;validate&quot; required&gt;
                &lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;
                &lt;span id=&quot;password_helper&quot; class=&quot;helper-text&quot; data-error=&quot;&quot;&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class=&quot;input-field col s12 center&quot;&gt;
                &lt;input type=&quot;submit&quot; class=&quot;btn&quot; value=&quot;Submit&quot;&gt;
            &lt;/div&gt;
        &lt;/form&gt;
        &lt;p&gt;Do not support Internet Explorer, please use modern browser.&lt;/p&gt;
    &lt;/div&gt;
&lt;/main&gt;
</code></pre>
<p>新建登录控制器文件 <strong>app/Controllers/Login.php</strong></p>
<pre><code class="language-php">&lt;?php

namespace App\Controllers;

use App\Models\UserModel;

class Login extends BaseController
{
	protected $helpers = ['form', 'text'];

	public function index()
	{
		$data['meta'] = csrf_meta();
		$data['css'] = [];
		$data['js'][] = base_url('js/admin.js?v=').random_string('basic');

		//csrf只开启post方法，所以要自己发送cookie
		$security = \Config\Services::security();
		$security-&gt;verify($this-&gt;request);
		echo view('header', $data);
		echo view('login_view');
		echo view('footer', $data);
	}

</code></pre>
<p><strong>app/Views/header.php</strong>、<strong>app/Views/footer.php</strong> 和 <strong>public/js/admin.js</strong> 是之前已经创建了的公共文件。<br>
然后配置路由，编辑 <strong>app/Config/Routes.php</strong> 文件：</p>
<pre><code class="language-php">$routes-&gt;setDefaultController('Login');
......
$routes-&gt;get('/', 'Login::index');
</code></pre>
<p>这样就可以访问 <code>http://localhost:8080/</code> 来显示登录界面了：<br>
<img src="https://xyg189.github.io/post-images/1628474885978.png" alt="" loading="lazy"></p>
<h3 id="添加-auth-库">添加 Auth 库</h3>
<p>所有认证（authentication）和授权（authorization）相关的处理都放到 Auth 库来实现，创建 <strong>app/Libraries/Auth.php</strong> 文件：</p>
<pre><code class="language-php">&lt;?php

namespace App\Libraries;

use App\Models\UserModel;

Class Auth {

    protected $user;
    protected $userModel;

    public function checkUser($rules = [])
	{
		$errors = [
			'_email' =&gt; 'Invalid email or password.',
			'_block' =&gt; 'Account is blocked, please contact system administrator.',
			'_password' =&gt; 'Invalid email or password.'
		];
		
		$db = \Config\Database::connect();
        $this-&gt;userModel = new UserModel($db);

		foreach ($rules as $rule) {
            $callable = is_callable($rule);
			$param = FALSE;
			if (! $callable &amp;&amp; preg_match('/(.*?)\[(.*)\]/', $rule, $match))
			{
				$rule  = $match[1];
				$param = $match[2];
			}

			if ($this-&gt;$rule($param) === FALSE) {
				return $errors[$rule];
			}
		}

		return $this-&gt;user;
	}

    private function _email($email = NULL)
	{
        if (! empty($email)) {
		    $this-&gt;user = $this-&gt;userModel-&gt;where('user_email', $email)-&gt;first();
		    return ! empty($this-&gt;user);
        }

        return FALSE;
	}

	private function _block()
	{
        if (! empty($this-&gt;user))
		    return empty($this-&gt;user['blocked_at']);

        return FALSE;
	}

	private function _password($password = NULL)
	{
        if (! empty($password)) {
		    return password_verify($password, $this-&gt;user['user_password']);
        }

        return FALSE;
	}

}
</code></pre>
<p>这里定义了 <strong>checkUser()</strong> 方法，来验证需要处理的验证规则。对于登录验证，我们定义了3条验证规则：</p>
<ol>
<li><strong>_email</strong>，验证输入的 Email 是否存在</li>
<li><strong>_block</strong>，验证账号是否被屏蔽</li>
<li><strong>_password</strong> 验证输入的密码是否正确</li>
</ol>
<p>为了实现整个验证流程，这些规则需要有先后顺序要求，并且如果第一个规则验证通过就需要返回用户的数据以供后续规则使用。</p>
<h3 id="添加用户数据模型">添加用户数据模型</h3>
<p>认证库需要访问用户数据，新建 <strong>app/Models/UserModel.php</strong> 模型文件：</p>
<pre><code class="language-php">&lt;?php namespace App\Models;

use CodeIgniter\Model;

class UserModel extends Model
{
    protected $table      = 'user';
    protected $primaryKey = 'user_id';

    protected $returnType     = 'array';
    protected $useSoftDeletes = true;

    protected $allowedFields = ['user_key', 'user_name', 'user_email', 'user_password', 'role', 'avatar', 'blocked_at'];

    protected $useTimestamps = true;
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';
    protected $deletedField  = 'deleted_at';
}
</code></pre>
<p>CodeIgniter 提供的模型基类已默认内置了很多功能：</p>
<ul>
<li>自动数据库连接</li>
<li>基本的 CRUD 方法</li>
<li>自动分页</li>
<li>数据过滤</li>
</ul>
<p>我们自己只需定义好基本的信息就可以直接使用了，免去了每个模型的重复操作代码。</p>
<h3 id="登录认证与处理错误信息">登录认证与处理错误信息</h3>
<p>为控制器 <strong>app/Controllers/Login.php</strong> 添加认证方法：</p>
<pre><code class="language-php">    public function check()
	{
		$output = ['result'=&gt;FALSE, 'token_name'=&gt;csrf_header(), 'token_value'=&gt;csrf_hash()];

		if (! $this-&gt;validate([
			'email'=&gt;'trim|required|valid_email',
			'password'=&gt;'trim|required|min_length[8]'
			])) {
			$output['message'] = $this-&gt;validator-&gt;getErrors();
        } else {
			$auth = service('auth');
			$result = $auth-&gt;checkUser([&quot;_email[{$this-&gt;request-&gt;getPost('email')}]&quot;, '_block', &quot;_password[{$this-&gt;request-&gt;getPost('password')}]&quot;]);
			if (! is_array($result)) {
				$output['message'] = $result;
			} else {
				$user = $result;
				$this-&gt;session = \Config\Services::session();
				$newdata = [
					'user_id'    =&gt; $user['user_id'],
                    'user_name'  =&gt; $user['user_name'],
                    'user_email' =&gt; $user['user_email'],
					'role'       =&gt; $user['role'],
					'avatar'     =&gt; $user['avatar'],
                    'logged_in'  =&gt; TRUE
                ];
                $this-&gt;session-&gt;set($newdata);
				$output['result'] = TRUE;
			}
        }

		$this-&gt;response-&gt;setContentType('application/json');
		$this-&gt;response-&gt;setBody(json_encode($output))-&gt;send();
	}
</code></pre>
<p>我们先使用 CodeIgniter 自带的验证类来验证用户的输入符合基本的要求，然后使用我们自己的 Auth 库来进行登录验证。所有错误信息都通过 JSON 格式的 message 带出。<br>
由于表单的 AJAX 提交是个普遍的操作，所以把这个代码放到 <strong>public/js/admin.js</strong> 公共文件中：</p>
<pre><code class="language-js">document.addEventListener('DOMContentLoaded', function() {

    M.AutoInit();

    let elems = document.querySelectorAll('form');

    elems.forEach(function(form) {
        if (form.method == 'post')
        form.addEventListener('submit', function(e) {
            e.preventDefault();
        
            postData(form.action, new FormData(form))
                .then(function(myJson) {
                    //重置CSRF参数
                    let meta = document.querySelector('meta[name='+myJson.token_name+']');
                    meta.setAttribute('content', myJson.token_value);
                    
                    if (typeof(myJson.message) == 'string')
                        M.toast({html: myJson.message, classes: myJson.result ? '' : 'red lighten-1'});

                    if (! myJson.result) {
                        console.error(myJson.message)
                        //显示form出错信息
                        if (myJson.message instanceof Object)
                            for (let id in myJson.message) {
                                let el = form.querySelector('#'+id);
                                let helper = form.querySelector('#'+id+'_helper');
                                helper.dataset.error = myJson.message[id];
                                if (el.parentNode.classList.contains('select-wrapper'))
                                    el.parentNode.classList.add('invalid');
                                else
                                    el.classList.add('invalid');
                            }
                    } else {
                        let delay = myJson.message ? 2000 : 50;
                        setTimeout(function() {
                            let fn = form.dataset.callback;
                            fn &amp;&amp; eval(fn);
                        }, delay);
                    }
                })
                .catch(error =&gt; console.error(error))
        })
    })
})
</code></pre>
<p>如果是 CodeIgniter 自带的验证类的错误信息直接显示在对于的输入字段下面，如果是 AUTH 库的出错信息则通过 toast 效果提示。<br>
<img src="https://xyg189.github.io/post-images/1628481050630.png" alt="" loading="lazy"></p>
<p><strong>重要：由于 CSRF 每次提交后都会生成新的 token，所以验证失败后需要更新 html 里的 meta 数据，这样才能在下次提交表单时带上正确的 token。</strong></p>
<p>最后，如果认证通过就用 Form 表单上定义的方法 <code>data-callback=&quot;location.href = '/admin/home'&quot;</code> 跳转页面到管理后台的首页。</p>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（四）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-4/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-4/">
        </link>
        <updated>2021-07-31T06:58:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="添加-csrf-过滤器">添加 CSRF 过滤器</h2>
<p>使用 CodeIgniter 4 的安全类以免受到跨站请求伪造（CSRF）的攻击。<br>
打开 <strong>app/Config/Filters.php</strong> 文件，首先向过滤器添加别名：</p>
<pre><code class="language-php">public $aliases = [
    'csrf' =&gt; CSRF::class
    ...
];
</code></pre>
<p>再为 POST 方法添加 csrf 配置：</p>
<pre><code class="language-php">public $methods = [
    'post' =&gt; ['throttle', 'csrf']
];
</code></pre>
<p>这样，所有的 POST 请求都需要验证令牌（tokens），默认情况下令牌会在每一次提交时重新生成，提供了更严格的安全机制。<br>
<strong>.env</strong> 文件中的默认配置：</p>
<pre><code>security.tokenName  = 'csrf_token_name'
security.headerName = 'X-CSRF-TOKEN'
security.cookieName = 'csrf_cookie_name'
security.expires    = 7200
security.regenerate = true
security.redirect   = true
security.samesite   = 'Lax'
</code></pre>
<p>有2个方法来获得令牌以便提交到后台验证：一个是 csrf_field()，可以在表单中生成隐藏字段<br>
<code>&lt;input type=&quot;hidden&quot; name=&quot;{csrf_token}&quot; value=&quot;{csrf_hash}&quot;&gt;</code>，通过表单提交到后台；<br>
另一个是 csrf_meta()，可以在 html 的 head 中生成<br>
<code>&lt;meta name=&quot;{csrf_header}&quot; content=&quot;{csrf_hash}&quot;&gt;</code>，再通过定义的 http header <strong>X-CSRF-TOKEN</strong> 来提交到后台。<br>
为了统一代码，GeminusAdmin 只使用 http header 来提交令牌。<br>
<strong>重要：验证需要使用cookie，具体验证流程请看 vendor/codeigniter4/framework/system/Security/Security.php 文件的 verify() 方法。</strong></p>
<h2 id="准备前端公共函数">准备前端公共函数</h2>
<p>因为不使用第三放的 JS 框架，我们需要自己准备前端公共函数。创建 <strong>public/js/admin.js</strong> 文件，添加代码：</p>
<pre><code class="language-js">function postData(url, data) {
    let option = {
        method: &quot;post&quot;,
        body: data,
        credentials: 'same-origin',
        headers: {
            &quot;Accept&quot;: &quot;application/json&quot;,
            &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;
        }
    };
    let meta = document.querySelector('meta[name=X-CSRF-TOKEN]');
    if (meta) {
        option.headers['X-CSRF-TOKEN'] = meta.getAttribute('content');
    }

    return fetch(url, option)
    .then(function(response) {
        if (! response.ok) {
            switch (response.status) {
                case 429:
                    //限流
                    return JSON.parse('{&quot;message&quot;:&quot;Too many requests. Please try again later.&quot;}');
                case 403:
                    //CSRF验证失败
                    location.href = location.href;
                default:
                    let err = new Error('HTTP status code: ' + response.status);
                    throw err;
            }
        }
        
        return response.json();
    })
}

function getData(url, type) {
    return fetch(url)
        .then(function(response) {
            return eval('response.' + type + '()');
        })
}
</code></pre>
<p>定义了 AJAX 需要用到的2个公共函数，可以看到 postData() 中通过读取 html 的 meta 添加了 <strong>X-CSRF-TOKEN</strong> 的 header。</p>
<h2 id="准备页面公共视图模版">准备页面公共视图模版</h2>
<p>创建 <strong>app/Views/header.php</strong> 文件，添加模版内容：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;!--Import Google Icon Font--&gt;
        &lt;link href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot; rel=&quot;stylesheet&quot;&gt;
        &lt;!--Import materialize.css--&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css&quot;  media=&quot;screen,projection&quot;/&gt;

        &lt;!--Let browser know website is optimized for mobile--&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;
        &lt;?=isset($meta) ? $meta : ''?&gt;
        &lt;?php foreach ($css as $item) : ?&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;&lt;?=$item?&gt;&quot;  media=&quot;screen,projection&quot;/&gt;
        &lt;?php endforeach ?&gt;
    &lt;/head&gt;
    &lt;body&gt;

</code></pre>
<p>上面的 <code>&lt;?=isset($meta) ? $meta : ''?&gt;</code> 就是为 csrf_meta() 留的位置。<br>
创建 <strong>app/Views/footer.php</strong> 文件，添加模版内容：</p>
<pre><code class="language-html">    &lt;!--JavaScript at end of body for optimized loading--&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js&quot;&gt;&lt;/script&gt;
    &lt;?php foreach ($js as $item) : ?&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;?=$item?&gt;&quot;&gt;&lt;/script&gt;
    &lt;?php endforeach ?&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（三）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-3/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-3/">
        </link>
        <updated>2021-07-27T09:15:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建过滤器">创建过滤器</h2>
<p>控制器过滤器可以是在控制器运行前或者运行后执行相应的操作，我们可以使用过滤器执行一些共同的常见的任务，GeminusAdmin 可以使用过滤器实现：</p>
<ul>
<li>在某些功能或接口执行请求速率限制</li>
<li>对于传入的请求执行 CSRF 验证</li>
<li>进行登录验证</li>
<li>根据用户角色控制访问权限</li>
<li>记录用户操作日志</li>
</ul>
<p>使用过滤器实现这些常见的功能，就可以在一个地方集中维护这些代码，不需要在各个控制器中重复编写了。从而使我们可以更专注于控制器应该要处理的任务。<br>
过滤器类必须实现 CodeIgniter\Filters\FilterInterface 接口。 过滤器类必须有 2 个方法：before() 和 after()，它们会在控制器运行之前和之后执行。 如果你的业务只需要其中一个方法，那另外的方法留空即可，不可以删除。 一个标准的过滤器类模板如下：</p>
<pre><code class="language-php">&lt;?php namespace App\Filters;

use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Filters\FilterInterface;

class MyFilter implements FilterInterface
{
    public function before(RequestInterface $request)
    {
        // Do something here
    }

    //--------------------------------------------------------------------

    public function after(RequestInterface $request, ResponseInterface $response)
    {
        // Do something here
    }
}
</code></pre>
<h2 id="添加限流过滤器">添加限流过滤器</h2>
<p>限流类（Throttler）提供了一种非常简单的方法，可以将用户要执行的活动限制为在设定的时间段内只能进行一定次数的尝试。 Throttler 实现了 Token Bucket （令牌桶） 算法的一个简化版本。一般，会将你要执行的每个操作都视为一个存储桶。调用该 check() 方法时，你要告诉它存储桶的大小，可以容纳多少令牌以及时间间隔。在默认情况下，每个 check() 的调用请求将会使用1个可用令牌。</p>
<h3 id="实现代码">实现代码</h3>
<p>我们在 <strong>app/Filters/Throttle.php</strong> 上创建自己的 Throttler 过滤器，该过滤器以每个 IP 地址每秒一个请求的速率限制实现了非常简单的速率限制。</p>
<pre><code class="language-php">&lt;?php

namespace App\Filters;

use CodeIgniter\Filters\FilterInterface;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Config\Services;

class Throttle implements FilterInterface
{
    /**
     * This is a demo implementation of using the Throttler class
     * to implement rate limiting for your application.
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function before(RequestInterface $request, $arguments = null)
    {
        $throttler = Services::throttler();

        // Restrict an IP address to no more
        // than 1 request per second across the
        // entire site.
        if ($throttler-&gt;check($request-&gt;getIPAddress(), 1, SECOND) === false) {
            return Services::response()-&gt;setStatusCode(429);
        }
    }

    //--------------------------------------------------------------------

    /**
     * We don't have anything to do here.
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param ResponseInterface|\CodeIgniter\HTTP\Response       $response
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
    {
        // ...
    }
}
</code></pre>
<p>运行时，此方法首先获取节流阀的实例。接下来，它将 IP 地址用作存储桶名称，并进行设置以将其限制为每秒一个请求。 如果节流阀拒绝检查，返回 false，则我们返回一个状态码为429（太多尝试的 HTTP Response）的响应， 并且脚本执行在调用控制器之前就结束了。</p>
<h3 id="应用过滤器">应用过滤器</h3>
<p>为了使过滤器生效，需要编辑 <strong>app/Config/Filters.php</strong> 并首先向过滤器添加别名：</p>
<pre><code class="language-php">public $aliases = [
    ...
    'throttle' =&gt; \App\Filters\Throttle::class
];
</code></pre>
<p>接下来，我们将其分配给网站上的所有 POST 请求：</p>
<pre><code class="language-php">public $methods = [
    'post' =&gt; ['throttle', 'csrf']
];
</code></pre>
<p><strong>为了使 Throttler 类可以正常工作，必须将 Cache 库设置为实际可用的缓存对象处理程序。</strong><br>
我们就使用 Redis 这样的内存缓存，编辑 <strong>app/Config/Cache.php</strong> 并配置处理器：</p>
<pre><code class="language-php">public $handler = 'redis';
</code></pre>
<p>然后配置 Redis 服务器的设置：</p>
<pre><code class="language-php">public $redis = [
    'host'     =&gt; '127.0.0.1',
    'password' =&gt; null,
    'port'     =&gt; 6379,
    'timeout'  =&gt; 0,
    'database' =&gt; 0,
];
</code></pre>
<h3 id="安装-redis-服务器">安装 Redis 服务器</h3>
<p>我们的开发环境还没有 Redis 服务器，为了方便就用 Docker 来直接安装：</p>
<pre><code class="language-bash">docker pull redis:5
docker run --name my-redis -p 127.0.0.1:6379:6379 -d redis:5
docker exec -it my-redis redis-cli
127.0.0.1:6379&gt; info server
....
127.0.0.1:6379&gt; quit
</code></pre>
<p>确认  Redis 服务器已正常运行。<br>
PHP 也需要安装对应的 redis 模块：</p>
<pre><code class="language-bash">sudo /opt/lampp/bin/pecl install redis
......
Build process completed successfully
Installing '/opt/lampp/lib/php/extensions/no-debug-non-zts-20190902/redis.so'
install ok: channel://pecl.php.net/redis-5.3.4
configuration option &quot;php_ini&quot; is not set to php.ini location
You should add &quot;extension=redis.so&quot; to php.ini
</code></pre>
<p>按提示编辑 <strong>/opt/lampp/etc/php.ini</strong>，添加 <code>extension=redis.so</code>，并使用命令确认 redis 模块正常加载：</p>
<pre><code class="language-bash">php -i | grep redis
</code></pre>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（二）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-2/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-2/">
        </link>
        <updated>2021-07-25T06:05:30.000Z</updated>
        <content type="html"><![CDATA[<p>GeminusAdmin 采用前后端不分离的开发方式，Web 页面由后端控制输出。因为主要关注 CodeIgniter 4 的使用，所以前端 JS 都采用原生语法，不使用第三方的框架。</p>
<h2 id="geminusadmin-基本模块">GeminusAdmin 基本模块</h2>
<p>根据后台管理系统常用包含的功能，GeminusAdmin 初步设定的模块：</p>
<ul>
<li>基本的安全，如限流、CSRF防护等</li>
<li>登录、登出</li>
<li>个人信息管理及修改密码</li>
<li>用户账户管理，包括重置密码、账户启停用等</li>
<li>基于角色的访问控制</li>
<li>用户操作日志记录与浏览</li>
<li>邮件队列管理</li>
<li>系统运行配置参数管理，如发送邮件账号</li>
<li>多语言支持</li>
</ul>
<h2 id="codeigniter-4-开发概念">CodeIgniter 4 开发概念</h2>
<figure data-type="image" tabindex="1"><img src="https://xyg189.github.io/post-images/1627264945317.png" alt="" loading="lazy"></figure>
<h3 id="启动入口">启动入口</h3>
<p>整个项目通过 public 目录下的 index.php 文件启动。并且使用 Web 服务器的配置来控制除已存在的目录和文件外，其他的 HTTP 请求都会经过 index.php 文件。<br>
public 目录下已提供 Apache 服务器使用的 .htaccess 文件：</p>
<pre><code>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]
</code></pre>
<h3 id="配置文件与环境变量">配置文件与环境变量</h3>
<p>CodeIgniter 4 提供的每个类库都在 app/Config 目录下单独提供了一个同名的配置文件。<br>
访问配置文件：</p>
<pre><code class="language-php">$config = config('Pager');
// Access settings as object properties
$pageSize = $config-&gt;perPage;
</code></pre>
<p>CodeIgniter 4 启动初始化时都会自动加载项目根目录下的 .env 文件，使用环境变量可以方便开发与部署，不需要改动 PHP 程序文件。开发环境里用到的密码、API Keys 或其它敏感数据都可以保存到 .env 文件里。<br>
比如我们定义开发环境的数据连接信息：</p>
<pre><code class="language-php">database.default.hostname = localhost
database.default.database = geminus
database.default.username = geminus
database.default.password = 12345678
database.default.DBDriver = MySQLi
</code></pre>
<p><strong>重要： .env 文件不要加入版本控制系统里。</strong></p>
<h3 id="mvc-模式">MVC 模式</h3>
<p>和很多 Web 框架类似， CodeIgniter 框架也使用了模型、视图、控制器结构，即 MVC 模式，来组织代码文件。<br>
<strong>模型</strong> 主要用来管理应用的数据, 根据应用的特殊业务规则获取数据。模型文件通常保存在 app/Models 目录下。<br>
<strong>视图</strong> 是一个没有或者少量逻辑的简单的文件, 它只负责将数据展示给用户。视图文件通常存放在 app/Views 目录下。<br>
<strong>控制器</strong> 主要承担了胶水代码的功能, 它主要在视图层和数据存储之间来回的处理并整合数据。控制器文件通常保存在 app/Controllers 目录下。<br>
<strong>控制器过滤器</strong> 可以是在控制器运行前或者运行后执行相应的操作，过滤器可以修改传入的请求，也可以对响应做出修改，从而具有很大的灵活性和功能性。</p>
<h3 id="类库与辅助函数的使用">类库与辅助函数的使用</h3>
<p>在 CodeIgniter 内提供的类库实际上都是以“服务”的形式呈现的。通过配置文件来定义了所有的类，我们可以如下方法来创建需要的实例：<br>
<code>$parser = \Config\Services::parser();</code><br>
或者使用便利的方法：<br>
<code>$parser = service('parser');</code><br>
 <br>
CodeIgniter 的辅助函数不是以面向对象的方式实现的，而仅仅是简单的，程序化的函数方法。 每个辅助函数都只执行一个特定的功能，并与其他的函数不产生依赖。<br>
直接通过以下方式加载：<br>
<code>helper('text');</code><br>
然后就可以直接调用此分类下的辅助函数了。<br>
 <br>
了解了基本的结构，接下来我们就逐步来实现 GeminusAdmin 的模块。<br>
 </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（一）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-1/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-1/">
        </link>
        <updated>2021-07-24T07:06:27.000Z</updated>
        <content type="html"><![CDATA[<p>GeminusAdmin 是一个基于 CodeIgniter 4 框架开发的通用后台管理系统，为应用项目后台管理系统的开发提供一个快速开始的基础平台。<br>
CodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。它的目标是让你能够更快速的开发，它提供了日常任务中所需的大量类库，以及简单的接口和逻辑结构。通过减少代码量，CodeIgniter 让你更加专注于你的创造性工作。</p>
<h2 id="开发使用的框架">开发使用的框架</h2>
<ul>
<li>后端：<a href="https://codeigniter.com">CodeIgniter 4</a></li>
<li>前端：<a href="https://materializecss.com">Materialize 1.0.0</a></li>
</ul>
<h2 id="开发环境准备">开发环境准备</h2>
<h3 id="安装-xampp">安装 XAMPP</h3>
<p>XAMPP 是最流行的 PHP 开发环境，我们直接从<a href="https://www.apachefriends.org/index.html">官网</a>下载安装包。因为 CodeIgniter 4 需要 PHP 7.3 以上，所以直接根据你的操作系统下载对应的 PHP 7.4 的最新版本，目前看到的版本：<br>
<img src="https://xyg189.github.io/post-images/1627112671273.png" alt="" loading="lazy"><br>
直接运行命令安装：</p>
<pre><code class="language-bash">chmod +x xampp-linux-x64-7.4.21-1-installer.run
sudo ./xampp-linux-x64-7.4.21-1-installer.run
</code></pre>
<p>遇到是否安装开发文件，因为今后需要安装一些 PHP 扩展，所以选择<em>是</em><br>
<code>XAMPP Developer Files [Y/n] :Y</code><br>
待安装完成后，运行命令启动：<br>
<code>sudo /opt/lampp/lampp start</code><br>
现在打开浏览器访问http://localhost 就可以看到 XAMPP 已就绪了。<br>
<img src="https://xyg189.github.io/post-images/1627115277246.png" alt="" loading="lazy"><br>
点击页面右上角的 phpMyAdmin 菜单可以进入数据库维护页面。<br>
<img src="https://xyg189.github.io/post-images/1627115289632.png" alt="" loading="lazy"><br>
为了方便地使用各种命令，可以编辑 .bashrc 文件，添加 PATH 环境：<br>
<code>export PATH=/opt/lampp/bin:$PATH</code></p>
<h3 id="安装-composer">安装 Composer</h3>
<p>Composer 是 PHP 的依赖管理工具，类似 nodejs 的 npm。访问<a href="https://getcomposer.org/download/">官网</a>的下载页面可以找到最新版本的下载链接。<br>
我们在 /opt/apps 目录下直接用命令下载：</p>
<pre><code class="language-bash">wget https://getcomposer.org/download/2.1.5/composer.phar
</code></pre>
<p>确保 composer 可以运行：</p>
<pre><code class="language-bash">chmod +x composer.phar
./composer.phar help
</code></pre>
<h3 id="安装-codeigniter-4">安装 CodeIgniter 4</h3>
<p>使用如下命令安装并在当前目录下生成 GeminusAdmin 的项目目录：</p>
<pre><code class="language-bash">./composer.phar create-project codeigniter4/appstarter GeminusAdmin
</code></pre>
<p>进入 /opt/apps/GeminusAdmin 目录可以看到整个项目的目录结构。<br>
其中：</p>
<ul>
<li>app 目录是所有 PHP 程序代码的目录</li>
<li>public 目录是 Web 应用程序的浏览器可以直接访问的目录，HTML、CSS、JS、图像等都放在这个目录</li>
<li>writable 用于存放程序运行时需要写入的内容，比如缓存、日志、用户上传文件等</li>
</ul>
<p>接下来就可以启动应用了：</p>
<pre><code class="language-bash">cp env .env
php spark serve
</code></pre>
<p>这是使用 PHP 内置的 Web 服务器来运行本地开发环境，用浏览器打开 http://localhost:8080/ 就可以看到缺省的页面了：<br>
<img src="https://xyg189.github.io/post-images/1627119532424.png" alt="" loading="lazy"></p>
<p>大功告成，我们可以开始 GeminusAdmin 的开发了！<br>
 </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
</feed>