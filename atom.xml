<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xyg189.github.io</id>
    <title>XYG&apos;s Blog</title>
    <updated>2021-07-27T13:22:33.698Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xyg189.github.io"/>
    <link rel="self" href="https://xyg189.github.io/atom.xml"/>
    <subtitle>不忘初心</subtitle>
    <logo>https://xyg189.github.io/images/avatar.png</logo>
    <icon>https://xyg189.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, XYG&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（三）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-3/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-3/">
        </link>
        <updated>2021-07-27T09:15:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建过滤器">创建过滤器</h2>
<p>控制器过滤器可以是在控制器运行前或者运行后执行相应的操作，我们可以使用过滤器执行一些共同的常见的任务，GeminusAdmin 可以使用过滤器实现：</p>
<ul>
<li>在某些功能或接口执行请求速率限制</li>
<li>对于传入的请求执行 CSRF 验证</li>
<li>进行登录验证</li>
<li>根据用户角色控制控制访问权限</li>
<li>记录用户操作日志</li>
</ul>
<p>使用过滤器实现这些常见的功能，就可以在一个地方集中维护这些代码，不需要在各个控制器中重复编写了。从而使我们可以更专注于控制器应该要处理的任务。<br>
过滤器类必须实现 CodeIgniter\Filters\FilterInterface 接口。 过滤器类必须有 2 个方法：before() 和 after()，它们会在控制器运行之前和之后执行。 如果你的业务只需要其中一个方法，那另外的方法留空即可，不可以删除。 一个标准的过滤器类模板如下：</p>
<pre><code class="language-php">&lt;?php namespace App\Filters;

use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Filters\FilterInterface;

class MyFilter implements FilterInterface
{
    public function before(RequestInterface $request)
    {
        // Do something here
    }

    //--------------------------------------------------------------------

    public function after(RequestInterface $request, ResponseInterface $response)
    {
        // Do something here
    }
}
</code></pre>
<h2 id="添加限流过滤器">添加限流过滤器</h2>
<p>限流类（Throttler）提供了一种非常简单的方法，可以将用户要执行的活动限制为在设定的时间段内只能进行一定次数的尝试。 Throttler 实现了 Token Bucket （令牌桶） 算法的一个简化版本。一般，会将你要执行的每个操作都视为一个存储桶。调用该 check() 方法时，你要告诉它存储桶的大小，可以容纳多少令牌以及时间间隔。在默认情况下，每个 check() 的调用请求将会使用1个可用令牌。</p>
<h3 id="实现代码">实现代码</h3>
<p>我们在 <strong>app/Filters/Throttle.php</strong> 上创建自己的 Throttler 过滤器，该过滤器以每个 IP 地址每秒一个请求的速率限制实现了非常简单的速率限制。</p>
<pre><code class="language-php">&lt;?php

namespace App\Filters;

use CodeIgniter\Filters\FilterInterface;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Config\Services;

class Throttle implements FilterInterface
{
    /**
     * This is a demo implementation of using the Throttler class
     * to implement rate limiting for your application.
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function before(RequestInterface $request, $arguments = null)
    {
        $throttler = Services::throttler();

        // Restrict an IP address to no more
        // than 1 request per second across the
        // entire site.
        if ($throttler-&gt;check($request-&gt;getIPAddress(), 1, SECOND) === false) {
            return Services::response()-&gt;setStatusCode(429);
        }
    }

    //--------------------------------------------------------------------

    /**
     * We don't have anything to do here.
     *
     * @param RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request
     * @param ResponseInterface|\CodeIgniter\HTTP\Response       $response
     * @param array|null                                         $arguments
     *
     * @return mixed
     */
    public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
    {
        // ...
    }
}
</code></pre>
<p>运行时，此方法首先获取节流阀的实例。接下来，它将 IP 地址用作存储桶名称，并进行设置以将其限制为每秒一个请求。 如果节流阀拒绝检查，返回 false，则我们返回一个状态码为429（太多尝试的 HTTP Response）的响应， 并且脚本执行在调用控制器之前就结束了。</p>
<h3 id="应用过滤器">应用过滤器</h3>
<p>为了使过滤器生效，需要编辑 <strong>app/Config/Filters.php</strong> 并首先向过滤器添加别名：</p>
<pre><code class="language-php">public $aliases = [
    ...
    'throttle' =&gt; \App\Filters\Throttle::class
];
</code></pre>
<p>接下来，我们将其分配给网站上的所有 POST 请求：</p>
<pre><code class="language-php">public $methods = [
    'post' =&gt; ['throttle', 'csrf']
];
</code></pre>
<p><strong>为了使 Throttler 类可以正常工作，必须将 Cache 库设置为实际可用的缓存对象处理程序。</strong><br>
我们就使用 Redis 这样的内存缓存，编辑 <strong>app/Config/Cache.php</strong> 并配置处理器：</p>
<pre><code class="language-php">public $handler = 'redis';
</code></pre>
<p>然后配置 Redis 服务器的设置：</p>
<pre><code class="language-php">public $redis = [
    'host'     =&gt; '127.0.0.1',
    'password' =&gt; null,
    'port'     =&gt; 6379,
    'timeout'  =&gt; 0,
    'database' =&gt; 0,
];
</code></pre>
<h3 id="安装-redis-服务器">安装 Redis 服务器</h3>
<p>我们的开发环境还没有 Redis 服务器，为了方便就用 Docker 来直接安装：</p>
<pre><code class="language-bash">docker pull redis:5
docker run --name my-redis -p 127.0.0.1:6379:6379 -d redis:5
docker exec -it my-redis redis-cli
127.0.0.1:6379&gt; info server
....
127.0.0.1:6379&gt; quit
</code></pre>
<p>确认  Redis 服务器已正常运行。<br>
PHP 也需要安装对应的 redis 模块：</p>
<pre><code class="language-bash">sudo /opt/lampp/bin/pecl install redis
......
Build process completed successfully
Installing '/opt/lampp/lib/php/extensions/no-debug-non-zts-20190902/redis.so'
install ok: channel://pecl.php.net/redis-5.3.4
configuration option &quot;php_ini&quot; is not set to php.ini location
You should add &quot;extension=redis.so&quot; to php.ini
</code></pre>
<p>按提示编辑 <strong>/opt/lampp/etc/php.ini</strong>，添加 <code>extension=redis.so</code>，并使用命令确认 redis 模块正常加载：</p>
<pre><code class="language-bash">php -i | grep redis
</code></pre>
<p> </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（二）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-2/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-2/">
        </link>
        <updated>2021-07-25T06:05:30.000Z</updated>
        <content type="html"><![CDATA[<p>GeminusAdmin 采用前后端不分离的开发方式，Web 页面由后端控制输出。因为主要关注 CodeIgniter 4 的使用，所以前端 JS 都采用原生语法，不使用第三方的框架。</p>
<h2 id="geminusadmin-基本模块">GeminusAdmin 基本模块</h2>
<p>根据后台管理系统常用包含的功能，GeminusAdmin 初步设定的模块：</p>
<ul>
<li>基本的安全，如限流、CSRF防护等</li>
<li>登录、登出</li>
<li>个人信息管理及修改密码</li>
<li>用户账户管理，包括重置密码、账户启停用等</li>
<li>基于角色的访问控制</li>
<li>用户操作日志记录与浏览</li>
<li>邮件队列管理</li>
<li>系统运行配置参数管理，如发送邮件账号</li>
<li>多语言支持</li>
</ul>
<h2 id="codeigniter-4-开发概念">CodeIgniter 4 开发概念</h2>
<figure data-type="image" tabindex="1"><img src="https://xyg189.github.io/post-images/1627264945317.png" alt="" loading="lazy"></figure>
<h3 id="启动入口">启动入口</h3>
<p>整个项目通过 public 目录下的 index.php 文件启动。并且使用 Web 服务器的配置来控制除已存在的目录和文件外，其他的 HTTP 请求都会经过 index.php 文件。<br>
public 目录下已提供 Apache 服务器使用的 .htaccess 文件：</p>
<pre><code>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]
</code></pre>
<h3 id="配置文件与环境变量">配置文件与环境变量</h3>
<p>CodeIgniter 4 提供的每个类库都在 app/Config 目录下单独提供了一个同名的配置文件。<br>
访问配置文件：</p>
<pre><code class="language-php">$config = config('Pager');
// Access settings as object properties
$pageSize = $config-&gt;perPage;
</code></pre>
<p>CodeIgniter 4 启动初始化时都会自动加载项目根目录下的 .env 文件，使用环境变量可以方便开发与部署，不需要改动 PHP 程序文件。开发环境里用到的密码、API Keys 或其它敏感数据都可以保存到 .env 文件里。<br>
比如我们定义开发环境的数据连接信息：</p>
<pre><code class="language-php">database.default.hostname = localhost
database.default.database = geminus
database.default.username = geminus
database.default.password = 12345678
database.default.DBDriver = MySQLi
</code></pre>
<p><strong>重要： .env 文件不要加入版本控制系统里。</strong></p>
<h3 id="mvc-模式">MVC 模式</h3>
<p>和很多 Web 框架类似， CodeIgniter 框架也使用了模型、视图、控制器结构，即 MVC 模式，来组织代码文件。<br>
<strong>模型</strong> 主要用来管理应用的数据, 根据应用的特殊业务规则获取数据。模型文件通常保存在 app/Models 目录下。<br>
<strong>视图</strong> 是一个没有或者少量逻辑的简单的文件, 它只负责将数据展示给用户。视图文件通常存放在 app/Views 目录下。<br>
<strong>控制器</strong> 主要承担了胶水代码的功能, 它主要在视图层和数据存储之间来回的处理并整合数据。控制器文件通常保存在 app/Controllers 目录下。<br>
<strong>控制器过滤器</strong> 可以是在控制器运行前或者运行后执行相应的操作，过滤器可以修改传入的请求，也可以对响应做出修改，从而具有很大的灵活性和功能性。</p>
<h3 id="类库与辅助函数的使用">类库与辅助函数的使用</h3>
<p>在 CodeIgniter 内提供的类库实际上都是以“服务”的形式呈现的。通过配置文件来定义了所有的类，我们可以如下方法来创建需要的实例：<br>
<code>$parser = \Config\Services::parser();</code><br>
或者使用便利的方法：<br>
<code>$parser = service('parser');</code><br>
 <br>
CodeIgniter 的辅助函数不是以面向对象的方式实现的，而仅仅是简单的，程序化的函数方法。 每个辅助函数都只执行一个特定的功能，并与其他的函数不产生依赖。<br>
直接通过以下方式加载：<br>
<code>helper('text');</code><br>
然后就可以直接调用此分类下的辅助函数了。<br>
 <br>
了解了基本的结构，接下来我们就逐步来实现 GeminusAdmin 的模块。<br>
 </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 CodeIgniter 4 开发 GeminusAdmin（一）]]></title>
        <id>https://xyg189.github.io/post/geminusadmin-1/</id>
        <link href="https://xyg189.github.io/post/geminusadmin-1/">
        </link>
        <updated>2021-07-24T07:06:27.000Z</updated>
        <content type="html"><![CDATA[<p>GeminusAdmin 是一个基于 CodeIgniter 4 框架开发的通用后台管理系统，为应用项目后台管理系统的开发提供一个快速开始的基础平台。<br>
CodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。它的目标是让你能够更快速的开发，它提供了日常任务中所需的大量类库，以及简单的接口和逻辑结构。通过减少代码量，CodeIgniter 让你更加专注于你的创造性工作。</p>
<h2 id="开发使用的框架">开发使用的框架</h2>
<ul>
<li>后端：<a href="https://codeigniter.com">CodeIgniter 4</a></li>
<li>前端：<a href="https://materializecss.com">Materialize 1.0.0</a></li>
</ul>
<h2 id="开发环境准备">开发环境准备</h2>
<h3 id="安装-xampp">安装 XAMPP</h3>
<p>XAMPP 是最流行的 PHP 开发环境，我们直接从<a href="https://www.apachefriends.org/index.html">官网</a>下载安装包。因为 CodeIgniter 4 需要 PHP 7.3 以上，所以直接根据你的操作系统下载对应的 PHP 7.4 的最新版本，目前看到的版本：<br>
<img src="https://xyg189.github.io/post-images/1627112671273.png" alt="" loading="lazy"><br>
直接运行命令安装：</p>
<pre><code class="language-bash">chmod +x xampp-linux-x64-7.4.21-1-installer.run
sudo ./xampp-linux-x64-7.4.21-1-installer.run
</code></pre>
<p>遇到是否安装开发文件，因为今后需要安装一些 PHP 扩展，所以选择<em>是</em><br>
<code>XAMPP Developer Files [Y/n] :Y</code><br>
待安装完成后，运行命令启动：<br>
<code>sudo /opt/lampp/lampp start</code><br>
现在打开浏览器访问http://localhost 就可以看到 XAMPP 已就绪了。<br>
<img src="https://xyg189.github.io/post-images/1627115277246.png" alt="" loading="lazy"><br>
点击页面右上角的 phpMyAdmin 菜单可以进入数据库维护页面。<br>
<img src="https://xyg189.github.io/post-images/1627115289632.png" alt="" loading="lazy"><br>
为了方便地使用各种命令，可以编辑 .bashrc 文件，添加 PATH 环境：<br>
<code>export PATH=/opt/lampp/bin:$PATH</code></p>
<h3 id="安装-composer">安装 Composer</h3>
<p>Composer 是 PHP 的依赖管理工具，类似 nodejs 的 npm。访问<a href="https://getcomposer.org/download/">官网</a>的下载页面可以找到最新版本的下载链接。<br>
我们在 /opt/apps 目录下直接用命令下载：</p>
<pre><code class="language-bash">wget https://getcomposer.org/download/2.1.5/composer.phar
</code></pre>
<p>确保 composer 可以运行：</p>
<pre><code class="language-bash">chmod +x composer.phar
./composer.phar help
</code></pre>
<h3 id="安装-codeigniter-4">安装 CodeIgniter 4</h3>
<p>使用如下命令安装并在当前目录下生成 GeminusAdmin 的项目目录：</p>
<pre><code class="language-bash">./composer.phar create-project codeigniter4/appstarter GeminusAdmin
</code></pre>
<p>进入 /opt/apps/GeminusAdmin 目录可以看到整个项目的目录结构。<br>
其中：</p>
<ul>
<li>app 目录是所有 PHP 程序代码的目录</li>
<li>public 目录是 Web 应用程序的浏览器可以直接访问的目录，HTML、CSS、JS、图像等都放在这个目录</li>
<li>writable 用于存放程序运行时需要写入的内容，比如缓存、日志、用户上传文件等</li>
</ul>
<p>接下来就可以启动应用了：</p>
<pre><code class="language-bash">cp env .env
php spark serve
</code></pre>
<p>这是使用 PHP 内置的 Web 服务器来运行本地开发环境，用浏览器打开 http://localhost:8080/ 就可以看到缺省的页面了：<br>
<img src="https://xyg189.github.io/post-images/1627119532424.png" alt="" loading="lazy"></p>
<p>大功告成，我们可以开始 GeminusAdmin 的开发了！<br>
 </p>
<hr>
<p> <br>
<img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="知识共享许可协议" loading="lazy">本作品由<a href="https://xyg189.github.io">XYG</a>采用<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    </entry>
</feed>